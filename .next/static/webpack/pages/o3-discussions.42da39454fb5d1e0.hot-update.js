"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/o3-discussions",{

/***/ "./lib/api.js":
/*!********************!*\
  !*** ./lib/api.js ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\n\n// Define API base URL\n// In a real app, this would be read from environment variables\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:8000\";\n// Create axios instance with default config\nconst apiClient = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: API_BASE_URL,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    // Add longer timeout to handle potential network delays\n    timeout: 15000\n});\n// Add request interceptor to attach auth token\napiClient.interceptors.request.use((config)=>{\n    // Skip authentication for local development if needed\n    if (true) {\n        const token = localStorage.getItem(\"auth_token\");\n        if (token) {\n            config.headers[\"Authorization\"] = \"Bearer \".concat(token);\n        }\n    }\n    console.log(\"Making request to: \".concat(config.baseURL).concat(config.url));\n    return config;\n}, (error)=>Promise.reject(error));\n// Add response interceptor for better error handling\napiClient.interceptors.response.use((response)=>response, (error)=>{\n    // Log better error information\n    if (error.response) {\n        var _error_config;\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        console.error(\"API Error Response:\", {\n            data: error.response.data,\n            status: error.response.status,\n            headers: error.response.headers,\n            url: (_error_config = error.config) === null || _error_config === void 0 ? void 0 : _error_config.url\n        });\n    } else if (error.request) {\n        var _error_config1, _error_config2;\n        // The request was made but no response was received\n        console.error(\"API No Response:\", {\n            request: error.request,\n            message: \"No response received from server. Is the backend running?\",\n            url: (_error_config1 = error.config) === null || _error_config1 === void 0 ? void 0 : _error_config1.url,\n            baseURL: (_error_config2 = error.config) === null || _error_config2 === void 0 ? void 0 : _error_config2.baseURL\n        });\n        console.log(\"Backend connectivity issue. Make sure Django server is running at:\", API_BASE_URL);\n    } else {\n        // Something happened in setting up the request that triggered an Error\n        console.error(\"API Request Error:\", error.message);\n    }\n    return Promise.reject(error);\n});\n// Helper function for retry logic\nconst apiCallWithRetry = async function(apiCall) {\n    let retryCount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 3, initialDelayMs = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1000;\n    let lastError;\n    for(let attempt = 0; attempt < retryCount; attempt++){\n        try {\n            return await apiCall();\n        } catch (error) {\n            lastError = error;\n            // Only retry network or timeout errors\n            if (!error.code || error.code !== \"ERR_NETWORK\" && error.code !== \"ECONNABORTED\") {\n                throw error;\n            }\n            const delayMs = initialDelayMs * Math.pow(2, attempt);\n            console.log(\"Attempt \".concat(attempt + 1, \" failed, retrying in \").concat(delayMs, \"ms...\"));\n            await new Promise((resolve)=>setTimeout(resolve, delayMs));\n        }\n    }\n    throw lastError;\n};\n// Define API endpoints\nconst api = {\n    // Check API connectivity (new method)\n    checkBackendConnection: async ()=>{\n        try {\n            // Simple endpoint that should always be available\n            const response = await apiClient.get(\"/api/\");\n            console.log(\"Backend connection successful\");\n            return true;\n        } catch (error) {\n            console.error(\"Backend connection failed:\", error.message);\n            return false;\n        }\n    },\n    // Auth (Note: Your actual backend may have different auth endpoints)\n    login: async (credentials)=>{\n        try {\n            // This endpoint might need to be updated based on your actual backend auth endpoints\n            const response = await apiCallWithRetry(()=>apiClient.post(\"/api/token/\", credentials));\n            return response.data;\n        } catch (error) {\n            console.error(\"Login error:\", error);\n            throw error;\n        }\n    },\n    // Departments\n    getDepartments: async ()=>{\n        try {\n            console.log(\"Fetching departments from:\", \"\".concat(API_BASE_URL, \"/api/departments/\"));\n            const response = await apiCallWithRetry(()=>apiClient.get(\"/api/departments/\"));\n            console.log(\"Departments fetched successfully:\", response.data);\n            // Return empty array if the data is null or undefined\n            return response.data || [];\n        } catch (error) {\n            console.error(\"Error fetching departments:\", error);\n            // Return empty array on error to prevent UI breaking\n            return [];\n        }\n    },\n    // Business Units\n    getBusinessUnits: async ()=>{\n        try {\n            const response = await apiClient.get(\"/api/business-units/\");\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching business units:\", error);\n            throw error;\n        }\n    },\n    getBusinessUnit: async (businessUnitId)=>{\n        try {\n            const response = await apiClient.get(\"/api/business-units/\".concat(businessUnitId, \"/\"));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching business unit \".concat(businessUnitId, \":\"), error);\n            throw error;\n        }\n    },\n    createBusinessUnit: async (businessUnitData)=>{\n        try {\n            const response = await apiClient.post(\"/api/business-units/\", businessUnitData);\n            return response.data;\n        } catch (error) {\n            console.error(\"Error creating business unit:\", error);\n            throw error;\n        }\n    },\n    updateBusinessUnit: async (businessUnitId, businessUnitData)=>{\n        try {\n            const response = await apiClient.put(\"/api/business-units/\".concat(businessUnitId, \"/\"), businessUnitData);\n            return response.data;\n        } catch (error) {\n            console.error(\"Error updating business unit \".concat(businessUnitId, \":\"), error);\n            throw error;\n        }\n    },\n    deleteBusinessUnit: async (businessUnitId)=>{\n        try {\n            const response = await apiClient.delete(\"/api/business-units/\".concat(businessUnitId, \"/\"));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error deleting business unit \".concat(businessUnitId, \":\"), error);\n            throw error;\n        }\n    },\n    // OKR Business Units\n    getOKRBusinessUnits: async (okrId)=>{\n        try {\n            const response = await apiClient.get(\"/api/okrs/\".concat(okrId, \"/business_units/\"));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching business units for OKR \".concat(okrId, \":\"), error);\n            throw error;\n        }\n    },\n    assignBusinessUnitsToOKR: async (okrId, businessUnitIds)=>{\n        try {\n            const response = await apiClient.post(\"/api/okrs/\".concat(okrId, \"/assign_business_units/\"), businessUnitIds);\n            return response.data;\n        } catch (error) {\n            console.error(\"Error assigning business units to OKR \".concat(okrId, \":\"), error);\n            throw error;\n        }\n    },\n    // Users\n    getUsers: async ()=>{\n        try {\n            console.log(\"Fetching users from:\", \"\".concat(API_BASE_URL, \"/api/users/\"));\n            const response = await apiCallWithRetry(()=>apiClient.get(\"/api/users/\"));\n            console.log(\"Users fetched successfully:\", response.data);\n            // Return empty array if the data is null or undefined\n            return response.data || [];\n        } catch (error) {\n            console.error(\"Error fetching users:\", error);\n            // Return empty array on error to prevent UI breaking\n            return [];\n        }\n    },\n    getUser: async (userId)=>{\n        try {\n            const response = await apiClient.get(\"/api/users/\".concat(userId, \"/\"));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching user \".concat(userId, \":\"), error);\n            throw error;\n        }\n    },\n    // OKRs\n    getOKRs: async ()=>{\n        try {\n            const response = await apiClient.get(\"/api/okrs/\");\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching OKRs:\", error);\n            throw error;\n        }\n    },\n    getOKR: async (okrId)=>{\n        try {\n            const response = await apiClient.get(\"/api/okrs/\".concat(okrId, \"/\"));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching OKR \".concat(okrId, \":\"), error);\n            throw error;\n        }\n    },\n    createOKR: async (okrData)=>{\n        try {\n            // Transform the data format to match what the backend expects\n            const transformedData = {\n                ...okrData,\n                // Map title to name if title exists\n                name: okrData.title,\n                // For user mappings - convert assigned_users to the format backend expects\n                assigned_user_ids: okrData.assigned_user_ids || [],\n                // Set primary user\n                primary_user_id: okrData.primary_user_id || null,\n                // Use business_unit_ids if it exists\n                business_unit_ids: okrData.business_unit_ids || []\n            };\n            // Remove title field as we've transformed it to name\n            if (transformedData.title) {\n                delete transformedData.title;\n            }\n            // Log the transformed data being sent\n            console.log(\"Data being sent to create OKR API:\", {\n                endpoint: \"/api/okrs/\",\n                original: okrData,\n                transformed: transformedData\n            });\n            // Handle the multi-user assignment and business units in the backend\n            const response = await apiClient.post(\"/api/okrs/\", transformedData);\n            return response.data;\n        } catch (error) {\n            console.error(\"Error creating OKR:\", error);\n            throw error;\n        }\n    },\n    updateOKR: async (okrId, okrData)=>{\n        try {\n            var _okrData_assigned_users_find;\n            // Transform the data format to match what the backend expects\n            const transformedData = {\n                ...okrData,\n                // For user mappings - convert assigned_users to the format backend expects\n                assigned_user_ids: okrData.assigned_users ? okrData.assigned_users.map((user)=>user.user_id) : [],\n                // Set primary user\n                primary_user_id: okrData.assigned_users ? (_okrData_assigned_users_find = okrData.assigned_users.find((user)=>user.is_primary)) === null || _okrData_assigned_users_find === void 0 ? void 0 : _okrData_assigned_users_find.user_id : null,\n                // Use business_unit_ids if it exists, otherwise use business_units\n                business_unit_ids: okrData.business_unit_ids || okrData.business_units || []\n            };\n            // Remove fields the backend doesn't expect\n            if (transformedData.assigned_users) {\n                delete transformedData.assigned_users;\n            }\n            if (transformedData.business_units && transformedData.business_unit_ids) {\n                delete transformedData.business_units;\n            }\n            // Log the transformed data being sent\n            console.log(\"Data being sent to update OKR API:\", {\n                endpoint: \"/api/okrs/\".concat(okrId, \"/\"),\n                original: okrData,\n                transformed: transformedData\n            });\n            // Send the request\n            const response = await apiClient.put(\"/api/okrs/\".concat(okrId, \"/\"), transformedData);\n            return response.data;\n        } catch (error) {\n            console.error(\"Error updating OKR \".concat(okrId, \":\"), error);\n            throw error;\n        }\n    },\n    deleteOKR: async (okrId)=>{\n        try {\n            const response = await apiClient.delete(\"/api/okrs/\".concat(okrId, \"/\"));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error deleting OKR \".concat(okrId, \":\"), error);\n            throw error;\n        }\n    },\n    // Child OKRs - Get OKRs with a specific parent_okr\n    getChildOKRs: async (parentOkrId)=>{\n        try {\n            const response = await apiClient.get(\"/api/okrs/?parent_okr=\".concat(parentOkrId));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching child OKRs for parent \".concat(parentOkrId, \":\"), error);\n            throw error;\n        }\n    },\n    // Get assigned users for an OKR\n    getOKRAssignedUsers: async (okrId)=>{\n        try {\n            const response = await apiClient.get(\"/api/okrs/\".concat(okrId, \"/assigned_users/\"));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching assigned users for OKR \".concat(okrId, \":\"), error);\n            throw error;\n        }\n    },\n    // Add a user to an OKR \n    addUserToOKR: async (okrId, userData)=>{\n        try {\n            const response = await apiClient.post(\"/api/okrs/\".concat(okrId, \"/assign_user/\"), userData);\n            return response.data;\n        } catch (error) {\n            console.error(\"Error adding user to OKR \".concat(okrId, \":\"), error);\n            throw error;\n        }\n    },\n    // Remove a user from an OKR\n    removeUserFromOKR: async (okrId, userId)=>{\n        try {\n            const response = await apiClient.delete(\"/api/okrs/\".concat(okrId, \"/remove_user/\").concat(userId, \"/\"));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error removing user from OKR \".concat(okrId, \":\"), error);\n            throw error;\n        }\n    },\n    // Set a user as primary for an OKR\n    setPrimaryUserForOKR: async (okrId, userId)=>{\n        try {\n            const response = await apiClient.post(\"/api/okrs/\".concat(okrId, \"/set_primary_user/\"), {\n                user_id: userId\n            });\n            return response.data;\n        } catch (error) {\n            console.error(\"Error setting primary user for OKR \".concat(okrId, \":\"), error);\n            throw error;\n        }\n    },\n    // Tasks\n    getTasks: async ()=>{\n        try {\n            const response = await apiClient.get(\"/api/tasks/\");\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching tasks:\", error);\n            throw error;\n        }\n    },\n    getTask: async (taskId)=>{\n        try {\n            const response = await apiClient.get(\"/api/tasks/\".concat(taskId, \"/\"));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching task \".concat(taskId, \":\"), error);\n            throw error;\n        }\n    },\n    createTask: async (taskData)=>{\n        try {\n            const response = await apiClient.post(\"/api/tasks/\", taskData);\n            return response.data;\n        } catch (error) {\n            console.error(\"Error creating task:\", error);\n            throw error;\n        }\n    },\n    updateTask: async (taskId, taskData)=>{\n        try {\n            const response = await apiClient.put(\"/api/tasks/\".concat(taskId, \"/\"), taskData);\n            return response.data;\n        } catch (error) {\n            console.error(\"Error updating task \".concat(taskId, \":\"), error);\n            throw error;\n        }\n    },\n    deleteTask: async (taskId)=>{\n        try {\n            const response = await apiClient.delete(\"/api/tasks/\".concat(taskId, \"/\"));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error deleting task \".concat(taskId, \":\"), error);\n            throw error;\n        }\n    },\n    // OKR Tasks - Get tasks for a specific OKR\n    getOKRTasks: async (okrId)=>{\n        try {\n            const response = await apiClient.get(\"/api/tasks/?linked_to_okr=\".concat(okrId));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching tasks for OKR \".concat(okrId, \":\"), error);\n            throw error;\n        }\n    },\n    // User-specific OKRs - now supports both assigned_to (legacy) and okr_user_mappings\n    getUserOKRs: async (userId)=>{\n        try {\n            const response = await apiClient.get(\"/api/okrs/user/\".concat(userId, \"/\"));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching OKRs for user \".concat(userId, \":\"), error);\n            throw error;\n        }\n    },\n    // User-specific tasks\n    getUserTasks: async (userId)=>{\n        try {\n            const response = await apiClient.get(\"/api/tasks/?assigned_to=\".concat(userId));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching tasks for user \".concat(userId, \":\"), error);\n            throw error;\n        }\n    },\n    // TaskChallenges\n    getTaskChallenges: async ()=>{\n        try {\n            const response = await apiClient.get(\"/api/task-challenges/\");\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching task challenges:\", error);\n            throw error;\n        }\n    },\n    getTaskChallenge: async (challengeId)=>{\n        try {\n            const response = await apiClient.get(\"/api/task-challenges/\".concat(challengeId, \"/\"));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching task challenge \".concat(challengeId, \":\"), error);\n            throw error;\n        }\n    },\n    createTaskChallenge: async (challengeData)=>{\n        try {\n            const response = await apiClient.post(\"/api/task-challenges/\", challengeData);\n            return response.data;\n        } catch (error) {\n            console.error(\"Error creating task challenge:\", error);\n            throw error;\n        }\n    },\n    updateTaskChallenge: async (challengeId, challengeData)=>{\n        try {\n            const response = await apiClient.put(\"/api/task-challenges/\".concat(challengeId, \"/\"), challengeData);\n            return response.data;\n        } catch (error) {\n            console.error(\"Error updating task challenge \".concat(challengeId, \":\"), error);\n            throw error;\n        }\n    },\n    deleteTaskChallenge: async (challengeId)=>{\n        try {\n            const response = await apiClient.delete(\"/api/task-challenges/\".concat(challengeId, \"/\"));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error deleting task challenge \".concat(challengeId, \":\"), error);\n            throw error;\n        }\n    },\n    // Get challenges for a specific task\n    getTaskChallengesByTask: async (taskId)=>{\n        try {\n            const response = await apiClient.get(\"/api/task-challenges/by_task/?task_id=\".concat(taskId));\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching challenges for task \".concat(taskId, \":\"), error);\n            throw error;\n        }\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (api);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/api.js\n"));

/***/ })

});